#!/usr/bin/env ruby

require 'rubygems'
require 'rest-client'
require 'trollop'
require 'pp'

$:.unshift File::expand_path(File.join(File.dirname(__FILE__), '..'))

require 'lib/command.rb'

opts = Trollop::options do
  opt :dir, "GIT directory to use", :short => 'd', :default => '.'
  opt :config, "Tracker config file location", :short => 'c', :default => "#{File.join(ENV['HOME'], '.trackerrc')}"
  opt :obsolete, "Used when recording new revision of patchset", :short => 'o', :type => :int
  opt :message, "Add short message to actions", :short => 'm', :type => :string
  opt :id, "Set identifier used by download, ack, push or nack", :short => 'i', :type => :string
  opt :upload, 'Upload current branch patches after record', :short => 'u', :type => :flag
  opt :branch, 'Create specified branch when downloading patches', :short => 'b', :type => :string
end

Tracker::Cmd.config(:set, :file => opts[:config])

def print_usage
  puts 'Usage:'
  puts
  puts 'tracker record    -   Record current patchset to tracker'
  puts 'tracker publish   -   Record current patchset to tracker and upload patches'
  puts 'tracker ack       -   ACK all patches in current branch'
  puts 'tracker nack      -   NACK all patches in current branch'
  puts 'tracker push      -   Mark all patches in current branch as PUSHED'
  puts 'tracker note      -   Annotate all patches and keep current state'
  puts 'tracker status    -   Display review status for current branch'
  puts 'tracker upload    -   Upload current patches (diffs) to tracker'
  puts 'tracker download  -   Download whole patchset from tracker (-i PATCHSET_ID, -b CREATE_BRANCH)'
  puts 'tracker apply     -   Apply patch with specified commit (-i COMMIT_ID)'
  puts 'tracker list      -   List all active sets'
  puts
  system("#{__FILE__} --help")
  puts
  puts 'Examples:'
  puts
  puts '$ tracker record -o 45           # Record current branch and obsolete patchset 45 (bump revision)'
  puts '$ tracker download 45 -b review  # Download set 45, create branch "review" and apply the downloaded patches'
  puts '$ tracker list new               # Display all new or open sets'
  puts '$ tracker list mfojtik -i author # Display all sets that were recorded by %mfojtik%'
  ''
end

puts case ARGV[0]
  when 'record' then Tracker::Cmd.record(opts[:dir], { :obsolete => opts[:obsolete], :upload => opts[:upload]})
  when 'ack' then Tracker::Cmd.ack(opts[:dir], { :message => opts[:message], :set => opts[:id] })
  when 'nack' then Tracker::Cmd.nack(opts[:dir], { :message => opts[:message], :set => opts[:id] })
  when 'push' then Tracker::Cmd.push(opts[:dir], { :message => opts[:message], :set => opts[:id] })
  when 'note' then Tracker::Cmd.note(opts[:dir], { :message => opts[:message], :set => opts[:id] })
  when 'upload' then Tracker::Cmd.upload(opts[:dir])
  when 'download' then Tracker::Cmd.download(opts[:dir], ARGV[1], opts[:branch])
  when 'status' then Tracker::Cmd.status(opts[:dir])
  when 'apply' then Tracker::Cmd.apply(opts[:dir], ARGV[1])
  when 'list' then Tracker::Cmd.list(ARGV[1], opts)
  when 'publish' then Tracker::Cmd.record(opts[:dir], { :obsolete => opts[:obsolete], :upload => true})
  else print_usage
end
